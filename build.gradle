plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.hibernate.orm' version '6.6.2.Final'
	id 'org.graalvm.buildtools.native' version '0.10.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}


group = 'com.yourstechnology'
version = '0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

processResources {
    dependsOn(generateSwaggerCode)
}

swaggerSources {
    petstore {
        inputFile = file("${rootDir}/src/main/resources/api/petstore.yaml")
        code {
            language = 'spring'

            configFile = file("${rootDir}/src/main/resources/api/config.json")
            //what to generate. Optional.
            components = [models: true, apis: true, supportingFiles: 'ApiUtil.java']
            dependsOn validation //first validate the yaml
        }
    }
}

//Set generated code to sourceSet to be able to used it in the implementation
compileJava.dependsOn swaggerSources.petstore.code
sourceSets.main.java.srcDir "${swaggerSources.petstore.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.petstore.code.outputDir}/src/main/resources"

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	runtimeOnly 'org.postgresql:postgresql'

    swaggerCodegen 'org.openapitools:openapi-generator-cli:7.3.0' 
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.20' 
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'  

    implementation 'com.fasterxml.uuid:java-uuid-generator:5.1.0'
    
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.12.6'

    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'
    implementation "ch.qos.logback:logback-core:1.5.12", "ch.qos.logback:logback-classic:1.5.12"

    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.2.1'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	compileOnly 'org.projectlombok:lombok'
	
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

hibernate {
	enhancement {
		enableAssociationManagement = true
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

